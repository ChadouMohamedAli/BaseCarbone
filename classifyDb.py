import pandas as pd
import unicodedata

# Load the Base Carbone file
df = pd.read_excel('dataSource/Base_Carbone_V23.6-v3.xlsx', sheet_name='F1')

# Columns to look into for classification
cols_to_check = [
    'Type poste',
    'Code de la catÃ©gorie 1',
    'Code de la catÃ©gorie 2',
    'Code de la catÃ©gorie 3',
    'Code de la catÃ©gorie 4',
    'Code de la catÃ©gorie 5',
    'Code de la catÃ©gorie 6'
]

# Accent and case normalization
def normalize(text):
    if pd.isnull(text):
        return ''
    text = str(text).lower()
    return ''.join(c for c in unicodedata.normalize('NFKD', text) if not unicodedata.combining(c))

# First classify type_processus (your current logic)
def classify_processus(row):
    combined = ' '.join(normalize(row[col]) for col in cols_to_check if pd.notnull(row[col]))
    if any(x in combined for x in ["gaz", "electricite", "chaleur", "fuel", "gazole", "biodiesel", "butane", "propane", "carburants", "essence", "diesel", "gpl", "charbon"]):
        return "energie"
    elif any(x in combined for x in ["transport", "camion", "vehicule", "voiture", "avion", "maritime", "train"]):
        return "transport"
    elif any(x in combined for x in ["coton", "tissu", "polyester", "matiere", "plastique", "textile", "metal"]):
        return "matiere"
    elif any(x in combined for x in ["dechet", "incineration", "recyclage"]):
        return "dechet"
    elif any(x in combined for x in ["beton", "roche", "tuiles"]):
        return "construction"
    elif "eau" in combined:
        return "eau"
    elif any(x in combined for x in ["electronique", "serveur", "data", "email", "cloud", "site web"]):
        return "service"
    else:
        return "autre"

df['type_processus'] = df.apply(classify_processus, axis=1)

# --- ðŸ“Œ REFERENCE TABLE FROM THE IMAGE ---
reference = [
    # Scope 1
    ("1.1 Ã‰missions directes des sources fixes de combustion", "1. Ã‰MISSIONS DIRECTES DE GES", "Scope 1"),
    ("1.2 Ã‰missions directes des sources mobiles de combustion", "1. Ã‰MISSIONS DIRECTES DE GES", "Scope 1"),
    ("1.3 Ã‰missions directes des procÃ©dÃ©s hors Ã©nergie", "1. Ã‰MISSIONS DIRECTES DE GES", "Scope 1"),
    ("1.4 Ã‰missions directes fugitives", "1. Ã‰MISSIONS DIRECTES DE GES", "Scope 1"),
    ("1.5 Ã‰missions issues de la biomasse (sols et forÃªts)", "1. Ã‰MISSIONS DIRECTES DE GES", "Scope 1"),

    # Scope 2
    ("2.1 Ã‰missions indirectes liÃ©es Ã  la consommation dâ€™Ã©lectricitÃ©", "2. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES Ã€ Lâ€™Ã‰NERGIE", "Scope 2"),
    ("2.2 Ã‰missions indirectes liÃ©es Ã  la consommation dâ€™Ã©nergie autre que lâ€™Ã©lectricitÃ©", "2. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES Ã€ Lâ€™Ã‰NERGIE", "Scope 2"),

    # Scope 3 â€“ Transport
    ("3.1 Transport de marchandise amont", "3. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AU TRANSPORT", "Scope 3"),
    ("3.2 Transport de marchandise aval", "3. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AU TRANSPORT", "Scope 3"),
    ("3.3 DÃ©placements domicile-travail", "3. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AU TRANSPORT", "Scope 3"),
    ("3.4 DÃ©placements des visiteurs et des clients", "3. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AU TRANSPORT", "Scope 3"),
    ("3.5 DÃ©placements professionnels", "3. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AU TRANSPORT", "Scope 3"),

    # Scope 3 â€“ Produits achetÃ©s
    ("4.1 Achats de biens", "4. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AUX PRODUITS ACHETÃ‰S", "Scope 3"),
    ("4.2 Immobilisations de biens", "4. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AUX PRODUITS ACHETÃ‰S", "Scope 3"),
    ("4.3 Gestion des dÃ©chets", "4. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AUX PRODUITS ACHETÃ‰S", "Scope 3"),
    ("4.4 Actifs en leasing amont", "4. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AUX PRODUITS ACHETÃ‰S", "Scope 3"),
    ("4.5 Achats de services", "4. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AUX PRODUITS ACHETÃ‰S", "Scope 3"),

    # Scope 3 â€“ Produits vendus
    ("5.1 Utilisation des produits vendus", "5. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AUX PRODUITS VENDUS", "Scope 3"),
    ("5.2 Actifs en leasing aval", "5. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AUX PRODUITS VENDUS", "Scope 3"),
    ("5.3 Fin de vie des produits vendus", "5. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AUX PRODUITS VENDUS", "Scope 3"),
    ("5.4 Investissements", "5. Ã‰MISSIONS INDIRECTES ASSOCIÃ‰ES AUX PRODUITS VENDUS", "Scope 3"),

    # Scope 3 â€“ Autres
    ("6.1 Autres Ã©missions indirectes", "6. AUTRES Ã‰MISSIONS INDIRECTES", "Scope 3")
]

# Turn into DataFrame for joining
ref_df = pd.DataFrame(reference, columns=["poste", "categorie", "scope"])

# Normalize the 'poste' column in both DataFrames for merging
df['poste_clean'] = df['Poste'].fillna('').apply(normalize)
ref_df['poste_clean'] = ref_df['poste'].apply(normalize)

# Merge the info back into the main dataframe
df = df.merge(ref_df[['poste_clean', 'categorie', 'scope']], on='poste_clean', how='left')

# Drop helper column
df.drop(columns=['poste_clean'], inplace=True)

# Save result
df.to_excel("Db/Base_Carbone_classified.xlsx", index=False)
